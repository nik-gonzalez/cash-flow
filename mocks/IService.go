// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	models "cash-flow-service/models"

	mock "github.com/stretchr/testify/mock"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// AddCashFlow provides a mock function with given fields: cashFlow
func (_m *IService) AddCashFlow(cashFlow models.CashFlow) error {
	ret := _m.Called(cashFlow)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.CashFlow) error); ok {
		r0 = rf(cashFlow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCashFlow provides a mock function with given fields: id
func (_m *IService) DeleteCashFlow(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCashFlow provides a mock function with given fields: id
func (_m *IService) GetCashFlow(id string) (*models.CashFlow, error) {
	ret := _m.Called(id)

	var r0 *models.CashFlow
	if rf, ok := ret.Get(0).(func(string) *models.CashFlow); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CashFlow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCashFlows provides a mock function with given fields:
func (_m *IService) GetCashFlows() ([]models.CashFlow, error) {
	ret := _m.Called()

	var r0 []models.CashFlow
	if rf, ok := ret.Get(0).(func() []models.CashFlow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CashFlow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCashFlow provides a mock function with given fields: cashFlow
func (_m *IService) UpdateCashFlow(cashFlow models.CashFlow) error {
	ret := _m.Called(cashFlow)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.CashFlow) error); ok {
		r0 = rf(cashFlow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
